@inject IUserSession Session
@code {
    [Parameter] public string Model { get; set; }
    [Parameter] public TextModel Parsed { get; set; }

    protected override void OnParametersSet()
    {
        if (Parsed == null)
        {
            Parsed = TextModel.Parse(Model);
        }
    }
}

@switch (Parsed)
{
    case TextModel.Spans spans:
        @foreach (var span in spans.Children)
        {
            <RichText Parsed="@span" />
        }
        break;

    case TextModel.Lines lines:
        @foreach (var line in lines.Children)
        {
            <RichText Parsed="@line" /><br />
        }
        break;

    case TextModel.Paras paras:
        <div class="rich-text__paras">
            @foreach (var para in paras.Children)
            {
                <p>
                    <RichText Parsed="@para" />
                </p>
            }
        </div>
        break;

    case TextModel.Split split:
        @for (var i = 0; i < split.Children.Length; i++)
        {
            <RichText Parsed="@split.Children[i]" />
            @if (i < split.Children.Length - 1)
            {
                <div class="rich-text__bar@(split.IsCompact ? " rich-text__bar--compact" : "")" />
            }
        }
        break;
            
    case TextModel.Bold bold:
        <span class="rich-text__bold">
            <RichText Parsed="@bold.Child" />
        </span>
        break;

    case TextModel.Small small:
        <span class="rich-text__small">
            <RichText Parsed="@small.Child" />
        </span>
        break;

    case TextModel.Run run:
        <text>@run.Text</text>
        break;

    case TextModel.Error error:
        <span class="rich-text__error">
            <RichText Parsed="@error.Child" />
        </span>
        break;

    case TextModel.Indent indent:
        @for (var i = 0; i < indent.Level; i++)
        {
            <text>...</text>
        }
        break;

    case TextModel.Symbol symbol:
        <span class="rich-text__no-break@(symbol.IsLarge ? " rich-text__no-break--large" : "")">@symbol.Prefix<img class="rich-text__symbol@(symbol.IsLarge ? " rich-text__symbol--large" : "")" src="symbols/@(symbol.Name).png">@symbol.Suffix</span>
        break;

    case TextModel.Card card:
        var model = All.Cards.ByName(card.Name);
        if (model.Types.Any())
        {
            var background = Backgrounds.FromTypes(model.Types);
            var cost = model.GetCost(Array.Empty<IModifier>());
            var set = All.Cards.GetSet(card.Name);
            var value = (model as ITreasureCard)?.StaticValue;
            <WithTooltip>
                <Content>
                    @card.Prefix<span style="background: @background">@Strings.TitleCase(card.Name)</span>@card.Suffix
                </Content>
                <Tooltip>
                    <Magnify>
                        <KingdomCard Name="@card.Name" Types="@model.Types" Art="@model.Art" Cost="@cost" Text="@model.Text" Set="@set" />
                    </Magnify>
                </Tooltip>
            </WithTooltip>   
        }
        else
        {
            <WithTooltip>
                <Content>
                    @(card.Prefix)a @Strings.TitleCase(card.Name) token@(card.Suffix)
                </Content>
                <Tooltip>
                    <Magnify>
                        <RichText Model="@model.Text" />
                    </Magnify>
                </Tooltip>
            </WithTooltip>   
        }
        break;

    case TextModel.Player player:
        if (Session.Username.Equals(player.Name))
        {
            <text>@(player.Prefix)You@(player.Suffix)</text>
        }
        else
        {
            <PlayerLink Name="@player.Name" Prefix="@player.Prefix" Suffix="@player.Suffix" />
        }
        break;

    case TextModel.Pronominal pro:
        if (Session.Username.Equals(pro.Name))
        {
            <text>@pro.IfYou</text>
        }
        else
        {
            <text>@pro.IfThem</text>
        }
        break;

    default:
        <text>@Parsed</text>
        break;
}
