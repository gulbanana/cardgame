@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel Model { get; set; }
    [CascadingParameter] public ClientDispatcher Dispatch { get; set; } 

    string PlayerOrSpectatee => (
        Session.Username == Model.ActivePlayer || 
        Session.Username == Model.ControllingPlayer || 
        !Model.Players.Contains(Session.Username)) ? Model.ActivePlayer : Session.Username;

    bool IsEnabled => Session.Username.Equals(Model.ControllingPlayer) &&
        !Model.IsFinished &&
        !Model.ExecutingBackgroundTasks;
    int PotentialCoins => Model.Hands[PlayerOrSpectatee]
        .Select(All.Cards.ByName)
        .OfType<ITreasureCard>()
        .Sum(card => card.GetModifiedValue(Model)?.Coins??0);
    int PotentialPotions => Model.Hands[PlayerOrSpectatee]
        .Select(All.Cards.ByName)
        .OfType<ITreasureCard>()
        .Count(card => card.GetModifiedValue(Model)?.Potion??false);
    int Unknowns => Model.Hands[PlayerOrSpectatee]
        .Select(All.Cards.ByName)
        .OfType<ITreasureCard>()
        .Count(card => !card.GetModifiedValue(Model).HasValue);
    string PotentialMoney => $"+{Cost.Format(PotentialCoins, PotentialPotions)}{(Unknowns > 0 ? $" +$?" : "")}";
    bool AnyoneChoosing => Model.ChoosingPlayers.Any();
    bool SomeoneVisibleChoosing => AnyoneChoosing && (Model.ChoosingPlayers.Peek().Equals(Session.Username) || !Model.Players.Contains(Session.Username));
}

<div class="board-view@((Model.KingdomHasCurse || Model.KingdomHasPotion) ? " board-view--constrained" : "")">
    <p style="grid-area: safe-commands" class="game-view__responsive-bar">
        <ActiveButton Label="@PotentialMoney" Enabled="@(IsEnabled && (PotentialCoins+PotentialPotions) > 0)" Action="@(() => Dispatch(new PlayAllTreasuresCommand()))" />
    </p>

    <p style="grid-area: stats" class="game-view__responsive-bar board-view__statbar">
        @if (AnyoneChoosing && !Model.ChoosingPlayers.Peek().Equals(Session.Username))
        {
            <span>Waiting for <PlayerLink @key="Model.ChoosingPlayers.Peek()" Name="@Model.ChoosingPlayers.Peek()" /> to make a choice...</span>
        }
        else
        {
            <Bold If="@(Model.CurrentPhase == Phase.Action)">Actions: @Model.ActionsRemaining</Bold>            
            <Bold If="@(Model.CurrentPhase == Phase.Treasure)">Coins: $@Model.CoinsRemaining</Bold>
            @if (Model.KingdomHasPotion)
            {
                <Bold If="@(Model.CurrentPhase == Phase.Treasure)">Potions: $@Model.PotionsRemaining</Bold>
            }
            <Bold If="@(Model.CurrentPhase == Phase.Buy)">Buys: @Model.BuysRemaining</Bold>
            @foreach (var effect in Model.ActiveEffects)
            {
                <EffectView Id="@effect" />
            }
        }
    </p>

    <p style="grid-area: global-commands" class="game-view__responsive-bar">
        <ActiveButton Label="End turn" Enabled="@IsEnabled" Action="@(() => Dispatch(new EndTurnCommand()))" />
    </p>

    <div style="grid-area: played-cards; display: grid;">
        <HorizontalLog>
            <div class="board-view__played-cards__centering-wrapper">
                <div class="board-view__played-cards__cards-and-choice">
                    <div style="grid-column: @(SomeoneVisibleChoosing ? "1/2" : "1/3")">
                        <PlayedView />
                    </div>

                    @if (AnyoneChoosing && SomeoneVisibleChoosing)
                    {
                        <div style="grid-column: 2/3" class="board-view__played-cards__choice">
                            <ActiveChoice Enabled="@Model.ChoosingPlayers.Peek().Equals(Session.Username)"
                                        Action="@(output => Dispatch(new EnterChoiceCommand { Output = output }))"
                                        Prompt="@Model.ChoicePrompt"
                                        Type="@Model.ChoiceType"
                                        Input="@Model.ChoiceInput" />
                        </div>
                    }
                </div>
            </div>
        </HorizontalLog>
    </div>
</div>