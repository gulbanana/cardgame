@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel Model { get; set; }
    [CascadingParameter] public ClientDispatcher Dispatch { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public Size Size { get; set; }
}

<span class="supply-pile">
    @if (Model.Supply[Id] > 0)
    {
        var isEnabled = Session.Username.Equals(Model.ControllingPlayer) &&
            !Model.IsFinished &&
            !Model.ExecutingBackgroundTasks &&
            Model.BuysRemaining > 0 &&
            All.Cards.Exists(Id) &&
            All.Cards.ByName(Id).GetCost(Model).LessThanOrEqual(Rules.MaxAffordableCost(Model));
        <ActiveCard Id="@Id" 
                    Enabled="isEnabled" 
                    Size="@Size" 
                    Stack="@Model.Supply[Id]"
                    Action="@(() => Dispatch(new BuyCardCommand { Id = Id }))" />
        <div class="supply-pile__tokens">
            @foreach (var effect in Model.SupplyTokens[Id])
            {
                <EffectView Id="@effect" />
            }
        </div>
    }
    else
    {
        <SpecialCard Name="empty" Size="@Size" Stack="1" />
    }
</span>