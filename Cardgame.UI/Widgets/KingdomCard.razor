@code {
    [Parameter] public string Name { get; set; }
    [Parameter] public CardType[] Types { get; set; }
    [Parameter] public string Art { get; set; } = "missing";
    [Parameter] public Cost Cost { get; set; }
    [Parameter] public Cost? Value { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public Size Size { get; set; }
    [Parameter] public int Stack { get; set; }
    [Parameter] public string OverrideColour { get; set; }
    [Parameter] public CardSet? Set { get; set; }
    private string[] colours;
    private double nameScale;
    private MarkupString type;
    private double typeScale;
    private string art;
    private string value;

    protected override void OnParametersSet()
    {
        colours = OverrideColour != null 
            ? new[] { OverrideColour } 
            : Types.Select(All.Cards.GetColor).ToArray();

        nameScale = Name == "Philosopher_sStone" ? 0.5 : 1.0;

        var builder = new System.Text.StringBuilder();
        for (var i = 0; i < Types.Length; i++)
        {
            if (i != 0)
            {
                builder.Append(" - ");
            }
            builder.Append("<span class=\"card__type__word\">");
            builder.Append(Types[i].ToString());
            builder.Append("</span>");
        }
        type = new MarkupString(builder.ToString());

        typeScale = 
            Types.Length == 1 ? 1.0 :
            Types.Length == 2 ? 0.75 :
            0.5;

        art = Art == null ? null : (Set == null ? $"/_content/Cardgame.UI/cards/Base/{Art}.jpg" : $"/_content/Cardgame.UI/cards/{Set}/{Art}.jpg");

        if (Types.Contains(CardType.Treasure))
        {
            value = !Value.HasValue ? "coinQ" :
                    Value.Value.Potion ? "potion" : 
                    "coin" + Value.Value.Coins;
        }
    }
}

<Stacked Count="@Stack" Colours="@colours" Size="@Size">
    <div class="kingdom-card active-border">
        @if (Size != Size.Third)
        {
            <div class="card__header card__title">
                @if (value != null)
                {
                    <div class="card__header__value">
                        <img class="card__cost-icon" src="/_content/Cardgame.UI/symbols/@(value).png" />
                    </div>
                }

                <span class="card__header__name" style="--name-scale: @nameScale;">@Strings.TitleCase(Name)</span>

                @if (value != null)
                {
                    <div class="card__header__value">
                        <img class="card__cost-icon" src="/_content/Cardgame.UI/symbols/@(value).png" />
                    </div>
                }
            </div>
        }
        @if (Size != Size.Full) {
            <div class="card__image card__picture@(Size == Size.Third ? " card__picture--borderless" : "")">
                <img src="@art" />
            </div>
        } else if (Text == null) {
            <div class="card__image-2x card__picture">
                <img src="@art" />
            </div>
        } else {
            <div class="card__image card__picture">
                @if (art != null)
                {
                    <img src="@art" />
                }
            </div>
            <div class="card__text-separator" />
            <div class="card__text">
                <div>
                    <RichText @key="Text.GetHashCode()" Model="@Text" />
                </div>
            </div>
        }
        @if (Size != Size.Third)
        {
            <div class="card__footer card__title">
                @if (!Cost.Potion || Cost.Coins > 0)
                {
                    <div class="card__footer-cost">
                        <img class="card__cost-icon" src="/_content/Cardgame.UI/symbols/coin@(Cost.Coins).png" />
                    </div>
                }

                @if (Cost.Potion)
                {
                    <div class="card__footer-cost">
                        <img class="card__cost-icon" src="/_content/Cardgame.UI/symbols/potion.png" />
                    </div>
                }

                <span class="card__footer__type" style="--type-scale: @typeScale;">@type</span>

                @if (Set != null)
                {
                    <div class="card__footer-set">
                        <img class="card__set-icon" src="/_content/Cardgame.UI/sets/@(Set).png" />
                    </div>
                }
            </div>
        }
    </div>
</Stacked>