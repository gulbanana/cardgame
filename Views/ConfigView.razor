@inject IUserSession Session
@code {
    [Parameter] public GameModel Game { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; } 
    CardSet configSet;
    string configPreset;

    private void OnStartGame()
    {
        Dispatch(new StartGameCommand
        {
            KingdomSet = configSet,
            KingdomPreset = configPreset
        });
    }
}

<div class="config-view">
    <div>
        <h3>Joined players (2-4)</h3>
        <ul>
            @foreach (var player in Game.Players)
            {
                <li>@player</li>
            }
        </ul>
    </div>

    <div>
        <h3>Game setup</h3>
        <div class="config-view__sets">
            <span>Card sets:</span>
            <select disabled="@(!Game.Players.Contains(Session.Username))" @bind="configSet">
                @foreach (var member in System.Enum.GetNames(typeof(CardSet)))
                {
                    var caption = Strings.TitleCase(member).Replace("1st", " (first edition)");
                    <option value="@member">@caption</option>
                }
            </select>
            <span>Preset:</span>
            <select disabled="@(!Game.Players.Contains(Session.Username))" @bind="configPreset">
                @foreach (var preset in Cards.Presets.BySet[configSet].Keys)
                {
                    <option @key="preset" value="@preset">@preset</option>
                }
            </select>
        </div>
    </div>

    <div>
        @if (!Game.Players.Contains(Session.Username) && Game.Players.Length < 4)
        {
            <ActiveButton Label="Join game" Action="@(() => Dispatch(new JoinGameCommand()))" />
        }
        else
        {
            <ActiveButton Label="Leave game" Action="@(() => Dispatch(new LeaveGameCommand()))" />
        }
    </div>

    <div>
        @if (Game.Players.Contains(Session.Username))
        {
            <ActiveButton Label="Start game" Action="@OnStartGame" Enabled="@(Game.Players.Length > 1)" />
        }
    </div>
</div>