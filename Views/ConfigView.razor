@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; }
    [Parameter] public CardSet Set { get; set; }
    [Parameter] public string Preset { get; set; }
    CardSet configSet;
    CardSet ConfigSet 
    { 
        get => configSet;
        set
        {
            configSet = value;
            configPreset = All.Presets.BySet(configSet).Keys.First();
            Dispatch(new ConfigureGameCommand
            {
                KingdomSet = configSet,
                KingdomPreset = configPreset
            });
        }
    }

    string configPreset;
    string ConfigPreset
    {
        get => configPreset;
        set
        {
            configPreset = value;
            Dispatch(new ConfigureGameCommand
            {
                KingdomSet = configSet,
                KingdomPreset = configPreset
            });
        }
    }

    protected override void OnParametersSet()
    {
        configSet = Model.KingdomSet;
        configPreset = Model.KingdomPreset;
    }

    private void OnStartGame()
    {
        Dispatch(new StartGameCommand
        {
            KingdomSet = configSet,
            KingdomPreset = configPreset
        });
    }
}

<div class="config-view">
    <div>
        <h3>Joined players (2-4)</h3>
        <ul>
            @foreach (var player in Model.Players)
            {
                <li>@player</li>
            }
        </ul>
    </div>

    <div>
        <h3>Game setup</h3>
        <div class="config-view__sets">
            <span>Primary card set:</span>
            <select disabled="@(!Model.Players.Contains(Session.Username))" @bind="ConfigSet">
                @foreach (var member in System.Enum.GetNames(typeof(CardSet)))
                {
                    var caption = Strings.TitleCase(member).Replace("1st", " (1e)").Replace("2nd", "");
                    <option value="@member">@caption</option>
                }
            </select>
            <span>Preset:</span>
            <select disabled="@(!Model.Players.Contains(Session.Username))" @bind="ConfigPreset">
                @foreach (var preset in All.Presets.BySet(configSet).Keys)
                {
                    <option @key="preset" value="@preset">@preset</option>
                }
            </select>
        </div>
    </div>

    <div>
        @if (!Model.Players.Contains(Session.Username) && Model.Players.Length < 4)
        {
            <ActiveButton Label="Join game" Action="@(() => Dispatch(new JoinGameCommand()))" />
        }
        else
        {
            <ActiveButton Label="Leave game" Action="@(() => Dispatch(new LeaveGameCommand()))" />
        }
    </div>

    <div>
        @if (Model.Players.Contains(Session.Username))
        {
            <ActiveButton Label="Start game" Action="@OnStartGame" Enabled="@(Model.Players.Length > 1)" />
        }
    </div>
</div>