@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel CurrentModel { get; set; }
    [CascadingParameter(Name = "Previous")] public GameModel PreviousModel { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; } 
    bool IsActivePlayer => Session.Username.Equals(CurrentModel.ActivePlayer);
    string PlayerOrSpectatee => CurrentModel.Players.Contains(Session.Username) ? Session.Username : CurrentModel.ActivePlayer;
}

<div class="dominion-view">
    <div style="grid-area: deck" class="dominion-view__pushdown">
        @if (CurrentModel.IsStarted && CurrentModel.Decks[PlayerOrSpectatee].Count == 0)
        {
            <SpecialCard Name="deck" Stack="1" />
        }
        else
        {                
            <SpecialCard Name="card-back" Stack="@(!CurrentModel.IsStarted ? 10 : CurrentModel.Decks[PlayerOrSpectatee].Count)" />
        }            
    </div>

    <div style="grid-area: hand" class="dominion-view__hscroll">
        
        @if (CurrentModel.IsStarted)
        {
            var hand = CurrentModel.Hands[PlayerOrSpectatee].AsEnumerable();
            if (CurrentModel.SettingKeepHandSorted[PlayerOrSpectatee])
            {
                hand = hand.OrderBy(card => All.Cards.ByName(card).SortByTypes()).ThenBy(card => card.Id);
            }

            var offset = 0;
            var last = default(string);
            foreach (var instance in hand)
            {
                if (last != null)
                {
                    if (last == instance.Id)
                    {
                        offset += 20;
                    }
                    else
                    {
                        offset += 110;
                    }
                }
                last = instance.Id;
            }

            var total = offset + 108; // one card, one flash border
            offset = 0;
            last = default(string);
            var i = 0;
            <div class="dominion-view__hand" style="width: @(total)px">
                @foreach (var instance in hand)
                {                  
                    var isNew = !PreviousModel.IsStarted || !PreviousModel.Hands[PlayerOrSpectatee].Contains(instance);                    

                    var card = All.Cards.ByName(instance);
                    var isEnabled = IsActivePlayer &&
                        !CurrentModel.IsFinished &&
                        !CurrentModel.ExecutingBackgroundTasks &&
                        ((card.Types.Contains(CardType.Action) && CurrentModel.CurrentPhase <= Phase.Action) ||
                         (card.Types.Contains(CardType.Treasure) && CurrentModel.CurrentPhase <= Phase.Treasure));

                    if (last != null)
                    {
                        if (last == instance.Id)
                        {
                            offset += 20;
                        }
                        else
                        {
                            offset += 110;
                        }
                    }
                    last = instance.Id;

                    <Overlap X="@offset" Z="@(++i)">
                        <FlashBorder @key="instance.ToString()" IsNew="@isNew">
                            <ActiveCard Model="@card" 
                                        Enabled="@isEnabled" 
                                        Action="@(() => Dispatch(new PlayCardCommand { Id = @instance.Id }))"/>
                        </FlashBorder>
                    </Overlap>
                }
            </div>
        }
        else if (CurrentModel.Players.Contains(Session.Username)) // the hand you might someday have
        {
            <div class="dominion-view__hand" style="--cards: 5">
                @for (var i = 0; i < 5; i++)
                {
                    <Overlap X="@(i * 90)" Z="@(i + 1)">
                        <FlashBorder IsNew="false">
                            <SpecialCard Name="card-back" />
                        </FlashBorder>    
                    </Overlap>
                }
            </div>
        }
    </div>
        
    <div style="grid-area: discard" class="dominion-view__pushdown">
        @if (CurrentModel.IsStarted)
        {
            var discard = CurrentModel.Discards[PlayerOrSpectatee];
            if (discard.Any())
            {
                <ActiveCard @key="discard.First()" Id="@discard.First().Id" Stack="@discard.Count" OverrideColour="special" />
            }
            else
            {
                <SpecialCard Name="discard" />
            }
        }
        else
        {
            <SpecialCard Name="discard" />
        }
    </div>
</div>