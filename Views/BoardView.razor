@inject IUserSession Session
@code {
    [Parameter] public GameModel Game { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; } 
    bool IsActivePlayer => Session.Username.Equals(Game.ActivePlayer);   
}
@{ 
    var isEnabled = IsActivePlayer &&
        !Game.IsFinished &&
        Game.ExecutingActions == 0;
    var potentialMoney = Game.Hands[Game.ActivePlayer]
        .Select(All.Cards.ByName)
        .OfType<Cards.TreasureCardModel>()
        .Select(card => card.Value)
        .Sum();
}

<div class="board-view">
    <p style="grid-area: safe-commands">
        <ActiveButton Label="@($"+ ${potentialMoney}")" Enabled="@(isEnabled && potentialMoney > 0)" Action="@(() => Dispatch(new PlayAllTreasuresCommand()))" />
    </p>

    <p style="grid-area: stats; text-align: center;">
        <Bold If="@(!Game.BuyPhase && Game.ActionsRemaining > 0)">Actions: @Game.ActionsRemaining</Bold>
        <Bold If="@(Game.BuysRemaining > 0)">Buys: @Game.BuysRemaining</Bold>
        <Bold If="@(Game.MoneyRemaining > 0)">Money: $@Game.MoneyRemaining</Bold>
    </p>

    <p style="grid-area: global-commands">
        <ActiveButton Label="End turn" Enabled="@isEnabled" Action="@(() => Dispatch(new EndTurnCommand()))" />
    </p>

    <div style="grid-area: played-cards" class="board-view__played-cards">
        <div class="board-view__played-cards__centered-row">
            <div style="grid-column: @(Game.ChoosingPlayers.Any() ? "1/2" : "1/3")">
                <GappedRow>
                    @for (var i = 0; i < Game.PlayedCards.Count; i++)
                    {
                        <ActiveCard Large="@(i == Game.PlayedCards.Count-1)" Id="@Game.PlayedCards[i]" />
                    }
                </GappedRow>
            </div>

            @if (Game.ChoosingPlayers.Any())
            {
                <div style="grid-column: 2/3" class="board-view__choice">
                    @if (Game.ChoosingPlayers.Peek().Equals(Session.Username) || !Game.Players.Contains(Session.Username))
                    {
                        <ActiveChoice Enabled="@Game.ChoosingPlayers.Peek().Equals(Session.Username)"
                                      Action="@(output => Dispatch(new EnterChoiceCommand { Output = output }))"
                                      Prompt="@Game.ChoicePrompt"
                                      Type="@Game.ChoiceType"
                                      Input="@Game.ChoiceInput" />
                    }
                    else
                    {
                        <span>Waiting for <PlayerLink @key="Game.ChoosingPlayers.Peek()" Name="@Game.ChoosingPlayers.Peek()" /> to make a choice...</span>
                    }
                </div>
            }
        </div>
    </div>
</div>