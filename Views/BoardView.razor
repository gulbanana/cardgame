@inject IUserSession Session
@code {
    [CascadingParameter] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; } 
    bool IsActivePlayer => Session.Username.Equals(Model.ActivePlayer);   
}
@{ 
    var isEnabled = IsActivePlayer &&
        !Model.IsFinished &&
        Model.ExecutingCards == 0;
    var potentialMoney = Model.Hands[Model.ActivePlayer]
        .Select(All.Cards.ByName)
        .OfType<ITreasureCard>()
        .Select(card => card.GetValue(Model))
        .Sum();
}

<div class="board-view">
    <p style="grid-area: safe-commands">
        <ActiveButton Label="@($"+ ${potentialMoney}")" Enabled="@(isEnabled && potentialMoney > 0)" Action="@(() => Dispatch(new PlayAllTreasuresCommand()))" />
    </p>

    <p style="grid-area: stats" class="board-view__statbar">
        <Bold If="@(!Model.BuyPhase && Model.ActionsRemaining > 0)">Actions: @Model.ActionsRemaining</Bold>
        <Bold If="@(Model.BuysRemaining > 0)">Buys: @Model.BuysRemaining</Bold>
        <Bold If="@(Model.MoneyRemaining > 0)">Money: $@Model.MoneyRemaining</Bold>
        @foreach (var effect in Model.ActiveEffects)
        {
            <EffectView Id="@effect" />
        }
    </p>

    <p style="grid-area: global-commands">
        <ActiveButton Label="End turn" Enabled="@isEnabled" Action="@(() => Dispatch(new EndTurnCommand()))" />
    </p>

    <div style="grid-area: played-cards" class="board-view__played-cards">
        <div class="board-view__played-cards__centered-row">
            <div class="board-view__played-cards__centered-row__actual-played-cards" style="grid-column: @(Model.ChoosingPlayers.Any() ? "1/2" : "1/3")">
                <GappedRow>
                    @for (var i = 0; i < Model.PlayedCards.Count; i++)
                    {
                        <ActiveCard Large="@(i == Model.PlayedCards.Count-1)" Id="@Model.PlayedCards[i]" KeepVisible="true" />
                    }
                </GappedRow>
            </div>

            @if (Model.ChoosingPlayers.Any())
            {
                <div style="grid-column: 2/3" class="board-view__choice">
                    @if (Model.ChoosingPlayers.Peek().Equals(Session.Username) || !Model.Players.Contains(Session.Username))
                    {
                        <ActiveChoice Enabled="@Model.ChoosingPlayers.Peek().Equals(Session.Username)"
                                      Action="@(output => Dispatch(new EnterChoiceCommand { Output = output }))"
                                      Prompt="@Model.ChoicePrompt"
                                      Type="@Model.ChoiceType"
                                      Input="@Model.ChoiceInput" />
                    }
                    else
                    {
                        <span>Waiting for <PlayerLink @key="Model.ChoosingPlayers.Peek()" Name="@Model.ChoosingPlayers.Peek()" /> to make a choice...</span>
                    }
                </div>
            }
        </div>
    </div>
</div>