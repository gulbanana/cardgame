@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; } 
    bool IsActivePlayer => Session.Username.Equals(Model.ActivePlayer); 
    bool IsEnabled => IsActivePlayer &&
        !Model.IsFinished &&
        !Model.ExecutingBackgroundTasks;
    int PotentialMoney => (Model.Players.Contains(Session.Username) ? Model.Hands[Session.Username] : Model.Hands[Model.ActivePlayer])
        .Select(All.Cards.ByName)
        .OfType<ITreasureCard>()
        .Select(card => card.GetValue(Model))
        .Sum();
    bool AnyoneChoosing => Model.ChoosingPlayers.Any();
    bool SomeoneVisibleChoosing => AnyoneChoosing && (Model.ChoosingPlayers.Peek().Equals(Session.Username) || !Model.Players.Contains(Session.Username));

    IEnumerable<Instance> lastTurnCards => Model.PlayedCards[Model.ActivePlayer].Where(Model.PreviouslyPlayedCards.Contains);
    IEnumerable<Instance> thisTurnCards => Model.PlayedCards[Model.ActivePlayer].Except(Model.PreviouslyPlayedCards);
}

<div class="board-view@(Model.KingdomHasCurse ? " board-view--constrained" : "")">
    <p style="grid-area: safe-commands" class="game-view__responsive-bar">
        <ActiveButton Label="@($"+ ${PotentialMoney}")" Enabled="@(IsEnabled && PotentialMoney > 0)" Action="@(() => Dispatch(new PlayAllTreasuresCommand()))" />
    </p>

    <p style="grid-area: stats" class="game-view__responsive-bar board-view__statbar">
        @if (AnyoneChoosing && !Model.ChoosingPlayers.Peek().Equals(Session.Username))
        {
            <span>Waiting for <PlayerLink @key="Model.ChoosingPlayers.Peek()" Name="@Model.ChoosingPlayers.Peek()" /> to make a choice...</span>
        }
        else
        {
            <Bold If="@(!Model.BuyPhase && Model.ActionsRemaining > 0)">Actions: @Model.ActionsRemaining</Bold>
            <Bold If="@(Model.BuysRemaining > 0)">Buys: @Model.BuysRemaining</Bold>
            <Bold If="@(Model.CoinsRemaining > 0)">Coins: $@Model.CoinsRemaining</Bold>
            @foreach (var effect in Model.ActiveEffects)
            {
                <EffectView Id="@effect" />
            }
        }
    </p>

    <p style="grid-area: global-commands" class="game-view__responsive-bar">
        <ActiveButton Label="End turn" Enabled="@IsEnabled" Action="@(() => Dispatch(new EndTurnCommand()))" />
    </p>

    <div style="grid-area: played-cards" class="board-view__played-cards">
        <div class="board-view__played-cards__centered-row">
            <div class="board-view__played-cards__centered-row__actual-played-cards" 
                 style="grid-column: @(SomeoneVisibleChoosing ? "1/2" : "1/3")">
                <GappedRow>
                    @foreach (var instance in lastTurnCards)
                    {
                        <ActiveCard Id="@instance.Id" />
                    }
                    @if (lastTurnCards.Any() && thisTurnCards.Any())
                    {
                        <div style="border-left: 1px; border-right: 1px; border-style: dashed; border-color: black; width: 2px; height: var(--card-height);" />
                    }
                    @for (var i = 0; i < thisTurnCards.Count(); i++)
                    {
                        <ActiveCard Large="@(i == thisTurnCards.Count()-1)" Id="@thisTurnCards.ElementAt(i).Id" KeepVisible="@SomeoneVisibleChoosing" />
                    }
                </GappedRow>
            </div>

            @if (AnyoneChoosing)
            {
                @if (SomeoneVisibleChoosing)
                {
                    <div style="grid-column: 2/3" class="board-view__choice">
                        <ActiveChoice Enabled="@Model.ChoosingPlayers.Peek().Equals(Session.Username)"
                                    Action="@(output => Dispatch(new EnterChoiceCommand { Output = output }))"
                                    Prompt="@Model.ChoicePrompt"
                                    Type="@Model.ChoiceType"
                                    Input="@Model.ChoiceInput" />
                    </div>
                }
            }
        </div>
    </div>
</div>