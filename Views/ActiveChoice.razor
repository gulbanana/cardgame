@using System.Text.Json
@code {
    [Parameter] public bool Enabled { get; set; }
    [Parameter] public Action<string> Action { get; set; }
    [Parameter] public ChoiceType Type { get; set; }
    [Parameter] public string Prompt { get; set; }
    [Parameter] public string Input { get; set; }
    private SelectCardsInput selectCardsInput;
    private bool[] selectCardsChoices;
    private string[] selectCardInput;
    private string yesNoMessage;

    protected override void OnParametersSet()
    {
        switch (Type)
        {
            case ChoiceType.SelectCard:
                selectCardInput = JsonSerializer.Deserialize<string[]>(Input);
                break;

            case ChoiceType.SelectCards:
                selectCardsInput = JsonSerializer.Deserialize<SelectCardsInput>(Input);
                selectCardsChoices = new bool[selectCardsInput.Choices.Length];
                break;

            case ChoiceType.YesNo:
                yesNoMessage = JsonSerializer.Deserialize<string>(Input);
                break;
        }
    }

    private void SelectCardSubmit(string id)
    {
        Action(JsonSerializer.Serialize(id));
    }

    private void SelectCardsToggle(int ix)
    {
        selectCardsChoices[ix] = !selectCardsChoices[ix];
        StateHasChanged();
    }

    private bool SelectCardsValid()
    {
        return !selectCardsInput.NumberRequired.HasValue || 
            selectCardsChoices.Where(b => b).Count() == selectCardsInput.NumberRequired.Value;
    }

    private void SelectCardsSubmit()
    {
        var selected = selectCardsInput.Choices
            .Select((id, ix) => (id, ix))
            .Where(t => selectCardsChoices[t.ix])
            .Select(t => t.id)
            .ToArray();

        Action(JsonSerializer.Serialize(selected));
    }

    private void YesNoSubmit(bool yesOrNo)
    {
        Action(JsonSerializer.Serialize(yesOrNo));
    }
}

<span @key="Prompt.GetHashCode()" class="active-choice__prompt">@Prompt</span>

@switch (Type)
{
    case ChoiceType.SelectCard:
        <p @key="Input" class="active-choice__select-cards">
            @foreach (var id in selectCardInput)
            {
                <ActiveCard Id="@id" Enabled="@Enabled" Half="true" Action="@(() => SelectCardSubmit(id))" />
            }
        </p>
        break;

    case ChoiceType.SelectCards:
        <p @key="Input" class="active-choice__select-cards">
            @for (var i = 0; i < selectCardsInput.Choices.Length; i++)
            {
                var ix = i;
                <div @key="ix" class="@(selectCardsChoices[ix] ? "" : "active-choice__select-cards__deselected")">
                    <ActiveCard Id="@selectCardsInput.Choices[ix]" Enabled="@Enabled" Half="true" Action="@(() => SelectCardsToggle(ix))" />
                </div>
            }
        </p>

        <div>
            <ActiveButton Label="Select" Enabled="@(Enabled && SelectCardsValid())" Action="SelectCardsSubmit" />
        </div>
        break;

    case ChoiceType.YesNo:
        <p>
            <RichText Model="@yesNoMessage" />
        </p>
        <div>
            <ActiveButton Label="Yes" Enabled="@Enabled" Action="@(() => YesNoSubmit(true))" />
            <ActiveButton Label="No" Enabled="@Enabled" Action="@(() => YesNoSubmit(false))" />
        </div>
        break;

    default:
        <p>Unknown choice type @Type</p>
        break;
}