@inject IUserSession Session
@code {
    [Parameter] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; }
    bool IsActivePlayer => Session.Username.Equals(Model.ActivePlayer);
}

<div class="game-view">
    <div style="grid-area: nav">
        <a href="/">&lt; games</a> 
        @if (Model.Players.Contains(Session.Username))
        {
            <text>Playing as <PlayerLink Name="@Session.Username" />.</text>
        }
        else
        {
            <text>Spectating as <PlayerLink Name="@Session.Username" />.</text>
        }
    </div>

    <div style="grid-area: event-log" class="game-view__events">
        <VerticalLog>
            @foreach (var e in Model.EventLog)
            {
                <p>
                    <RichText Model="@e"/>
                </p>
            }
        </VerticalLog>
    </div>

    <GridSeparator Area="left-bar"/>

    <div style="grid-area: board" class="game-view__board">
        <div style="grid-area: kingdom" class="game-view__kingdom">
            @if (Model.IsStarted)
            {
                <BuyStack Game="@Model" Id="Estate" />
                <BuyStack Game="@Model" Id="Duchy" />
                <BuyStack Game="@Model" Id="Province" />

                <BuyStack Game="@Model" Id="@Model.KingdomCards[0]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[1]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[2]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[3]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[4]" />

                <BuyStack Game="@Model" Id="Copper" />
                <BuyStack Game="@Model" Id="Silver" />
                <BuyStack Game="@Model" Id="Gold" />

                <BuyStack Game="@Model" Id="@Model.KingdomCards[5]" />  
                <BuyStack Game="@Model" Id="@Model.KingdomCards[6]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[7]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[8]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[9]" />            
            }
            else
            {
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Estate" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Duchy" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Province" />

                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />

                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Copper" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Silver" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Gold" />

                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
            }
        </div>

        @if (!Model.IsStarted)
        {
            <div style="grid-area: actions">
                <GappedColumn>
                    @if (!Model.Players.Contains(Session.Username) && Model.Players.Length < 4)
                    {
                        <ActiveButton Label="Join game" Action="@(() => Dispatch(new JoinGameCommand()))" />
                    }
                    else
                    {
                        @if (Model.Players.Length > 1)
                        {
                            <ActiveButton Label="Start game" Action="@(() => Dispatch(new StartGameCommand()))" />
                        }
                        <ActiveButton Label="Leave game" Action="@(() => Dispatch(new LeaveGameCommand()))" />
                    }
                </GappedColumn>
            </div>
        }
        else
        {
            <div style="grid-area: turn" class="game-view__turn-status">
                <p style="@(Model.BuyPhase ? "font-weight: normal" : "")">Actions: @Model.ActionsRemaining</p>
                <p>Buys: @Model.BuysRemaining</p>
                <p style="@(Model.MoneyRemaining == 0 ? "font-weight: normal" : "")">$@Model.MoneyRemaining</p>
            </div>

            <div style="grid-area: actions">
                <GappedRow>
                    @if (Model.IsStarted)
                    {
                        @foreach (var id in Model.PlayedCards)
                        {
                            <ActiveCard Large="true" Id="@id" />
                        }
                    }
                    else
                    {                
                        @if (!Model.Players.Contains(Session.Username) && Model.Players.Length < 4)
                        {
                            <ActiveButton Label="Join game" Action="@(() => Dispatch(new JoinGameCommand()))" />
                        }
                        else
                        {
                            @if (Model.Players.Length > 1)
                            {
                                <ActiveButton Label="Start game" Action="@(() => Dispatch(new StartGameCommand()))" />
                            }
                            <ActiveButton Label="Leave game" Action="@(() => Dispatch(new LeaveGameCommand()))" />
                        }
                    }
                </GappedRow>
            </div>
        }

        @if (Model.Players.Contains(Session.Username))
        {            
            <div style="grid-area: deck">
                <SpecialCard Name="card-back" Stack="@(!Model.IsStarted ? 3 : Model.Decks[Session.Username].Count)" />
            </div>

            <div style="grid-area: hand">
                <GappedRow>
                    @if (Model.IsStarted)
                    {
                        foreach (var id in Model.Hands[Session.Username])
                        {
                            var card = Cards.All.ByName[@id];
                            var isEnabled = IsActivePlayer &&
                                card.Type != CardType.Victory &&
                                card.Type != CardType.Curse &&
                                (!Model.BuyPhase || card.Type != CardType.Action);
                            <ActiveCard Model="@card" 
                                        Enabled="@isEnabled" 
                                        Action="@(() => Dispatch(new PlayCardCommand { Id = @id }))"/>
                        }
                    }
                    else
                    {
                        <SpecialCard Name="card-back" />
                        <SpecialCard Name="card-back" />
                        <SpecialCard Name="card-back" />
                        <SpecialCard Name="card-back" />
                        <SpecialCard Name="card-back" />
                    }
                </GappedRow>
            </div>

            <div style="grid-area: discard">
                @if (Model.IsStarted)
                {
                    var discard = Model.Discards[Session.Username];
                    if (discard.Any())
                    {
                        <ActiveCard Id="@discard.Last()" Stack="@discard.Count" Color="special" />
                    }
                    else
                    {
                        <SpecialCard Name="trash" />
                    }
                }
                else
                {
                    <SpecialCard Name="trash" />
                }
            </div>
        }
        else
        {
            <div style="grid-area: deck">
                <SpecialCard Name="card-back" Stack="@(!Model.IsStarted ? 3 : Model.Decks[Model.ActivePlayer].Count)" />
            </div>

            <div style="grid-area: hand">
                <GappedRow>
                    @if (Model.IsStarted)
                    {
                        foreach (var id in Model.Hands[Model.ActivePlayer])
                        {
                            var card = Cards.All.ByName[@id];
                            var isEnabled = IsActivePlayer &&
                                card.Type != CardType.Victory &&
                                (!Model.BuyPhase || card.Type != CardType.Action);
                            <ActiveCard Model="@card" 
                                        Enabled="@isEnabled" 
                                        Action="@(() => Dispatch(new PlayCardCommand { Id = @id }))"/>
                        }
                    }
                </GappedRow>
            </div>

            <div style="grid-area: discard">
                @if (Model.IsStarted)
                {
                    var discard = Model.Discards[Model.ActivePlayer];
                    if (discard.Any())
                    {
                        <ActiveCard Id="@discard.Last()" Stack="@discard.Count" Color="special" />
                    }
                    else
                    {
                        <SpecialCard Name="trash" />
                    }
                }
                else
                {
                    <SpecialCard Name="trash" />
                }
            </div>
        }
    </div>

    <GridSeparator Area="right-bar"/>

    <div style="grid-area: status" class="game-view__status">
        @if (Model.Players.Any())
        {
            <span>
                @(Model.IsStarted ? "Game in progress." : "Waiting to start.") Current players:
                @for (var i = 0; i < Model.Players.Length; i++)
                {                    
                    if (i < Model.Players.Length - 1)
                    {
                        <text><PlayerLink Name="@Model.Players[i]" />, </text>
                    }
                    else
                    {
                        <text><PlayerLink Name="@Model.Players[i]" />.</text>
                    }
                }
            </span>
        }
        else
        {
            <span>@(Model.IsStarted ? "Game in progress." : "Waiting to start.") No players.</span>
        }
    </div>

    <ChatView Model="@Model.ChatLog" />
</div>