@inject IUserSession Session
@code {
    [CascadingParameter(Name = "Current")] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; }
}

<div class="game-view">
    <div style="grid-area: nav">
        <a href="/">&lt; games</a> 
        @if (Model.Players.Contains(Session.Username))
        {
            <text>Playing as <PlayerLink Name="@Session.Username" Suffix="." /></text>
        }
        else
        {
            <text>Spectating as <PlayerLink Name="@Session.Username" Suffix="." /></text>
        }
    </div>

    <div style="grid-area: event-log">
        <VerticalLog>
            @foreach (var e in Model.EventLog)
            {
                <p>
                    <RichText @key="e.GetHashCode()" Model="@e"/>
                </p>
            }
        </VerticalLog>
    </div>

    <GridSeparator Area="left-bar"/>

    <div style="grid-area: board" class="game-view__board">
        <div class="game-view__kingdom">
            <div class="game-view__trash">
                <SpecialCard Name="trash" Stack="@(!Model.IsStarted ? 1 : Model.Trash.Count + 1)" />
            </div>

            @if (Model.IsStarted)
            {
                <SupplyView Id="Estate" />
                <SupplyView Id="Duchy" />
                <SupplyView Id="Province" />

                @for (var i = 0; i < 5; i++)
                {
                    <SupplyView Id="@Model.KingdomCards[i]" />
                }

                <SupplyView Id="Copper" />
                <SupplyView Id="Silver" />
                <SupplyView Id="Gold" />

                @for (var i = 5; i < 10; i++)
                {
                    <SupplyView Id="@Model.KingdomCards[i]" />
                }
            }
            else
            {
                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Estate")" Id="Estate" />
                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Duchy")" Id="Duchy" />
                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Province")" Id="Province" />

                @if (Model.KingdomPreset == null)
                {
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                }
                else
                {
                    var preset = All.Presets.BySet(Model.KingdomSet)[Model.KingdomPreset];
                    @for (var i = 0; i < 5; i++)
                    {
                        <ActiveCard @key="preset[i]" Enabled="false" Half="true" Stack="@Model.GetInitialSupply(preset[i])" Id="@preset[i]" />
                    }
                }

                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Copper")" Id="Copper" />
                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Silver")" Id="Silver" />
                <ActiveCard Enabled="false" Half="true" Stack="@Model.GetInitialSupply("Gold")" Id="Gold" />

                @if (Model.KingdomPreset == null)
                {
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                    <SpecialCard Name="card-back" Half="true" Stack="10" />
                }
                else
                {
                    var preset = All.Presets.BySet(Model.KingdomSet)[Model.KingdomPreset];
                    @for (var i = 5; i < 10; i++)
                    {
                        <ActiveCard @key="preset[i]" Enabled="false" Half="true" Stack="@Model.GetInitialSupply(preset[i])" Id="@preset[i]" />
                    }
                }
            }
        </div>

        <div>
            @if (!Model.IsStarted)
            {   
                <ConfigView Set="@Model.KingdomSet" Preset="@Model.KingdomPreset" />
            }
            else
            {
                <BoardView />
            }
        </div>

        <DominionView />
    </div>

    <GridSeparator Area="right-bar"/>

    <div style="grid-area: status" class="game-view__status">
        @if (Model.Players.Any())
        {
            <span>
                @(Model.IsStarted ? (Model.IsFinished ? "Game finished." : "Game in progress.") : "Waiting to start.") Players:
                @for (var i = 0; i < Model.Players.Length; i++)
                {                    
                    var score = All.Score.Calculate(Model, Model.Players[i]).Total;                    
                    if (i < Model.Players.Length - 1)
                    {
                        var text = $"<sym prefix='({score}' suffix='),'>vp</sym>";
                        <PlayerLink @key="@Model.Players[i]" Name="@Model.Players[i]" />
                        <RichText @key="Model.Players[i]+score" Model="@text" />
                    }
                    else
                    {
                        var text = $"<sym prefix='({score}' suffix=').'>vp</sym>";
                        <PlayerLink @key="@Model.Players[i]" Name="@Model.Players[i]" />
                        <RichText @key="Model.Players[i]+score" Model="@text" />
                    }
                }
            </span>
        }
        else
        {
            <span>@(Model.IsStarted ? "Game in progress." : "Waiting to start.") No players.</span>
        }
    </div>

    <ChatView />
</div>