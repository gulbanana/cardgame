@inject IUserSession Session
@code {
    [Parameter] public GameModel Model { get; set; }
    [CascadingParameter] public Executor Dispatch { get; set; }
    bool IsActivePlayer => Session.Username.Equals(Model.ActivePlayer);
    string PlayerOrSpectatee => Model.Players.Contains(Session.Username) ? Session.Username : Model.ActivePlayer;
}

<div class="game-view">
    <div style="grid-area: nav">
        <a href="/">&lt; games</a> 
        @if (Model.Players.Contains(Session.Username))
        {
            <text>Playing as <PlayerLink Name="@Session.Username" />.</text>
        }
        else
        {
            <text>Spectating as <PlayerLink Name="@Session.Username" />.</text>
        }
    </div>

    <div style="grid-area: event-log">
        <VerticalLog>
            @foreach (var e in Model.EventLog)
            {
                <p>
                    <RichText @key="e.GetHashCode()" Model="@e"/>
                </p>
            }
        </VerticalLog>
    </div>

    <GridSeparator Area="left-bar"/>

    <div style="grid-area: board" class="game-view__board">
        <div style="grid-area: kingdom" class="game-view__kingdom">
            <div class="game-view__trash">
                <SpecialCard Name="trash" Stack="@(!Model.IsStarted ? 1 : Model.Trash.Count + 1)" />
            </div>

            @if (Model.IsStarted)
            {
                <BuyStack Game="@Model" Id="Estate" />
                <BuyStack Game="@Model" Id="Duchy" />
                <BuyStack Game="@Model" Id="Province" />

                <BuyStack Game="@Model" Id="@Model.KingdomCards[0]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[1]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[2]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[3]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[4]" />

                <BuyStack Game="@Model" Id="Copper" />
                <BuyStack Game="@Model" Id="Silver" />
                <BuyStack Game="@Model" Id="Gold" />

                <BuyStack Game="@Model" Id="@Model.KingdomCards[5]" />  
                <BuyStack Game="@Model" Id="@Model.KingdomCards[6]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[7]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[8]" />
                <BuyStack Game="@Model" Id="@Model.KingdomCards[9]" />            
            }
            else
            {
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Estate" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Duchy" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Province" />

                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />

                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Copper" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Silver" />
                <ActiveCard Enabled="false" Half="true" Stack="3" Id="Gold" />

                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
                <SpecialCard Name="card-back" Half="true" Stack="3" />
            }
        </div>

        <div style="grid-area: actions">
            @if (!Model.IsStarted)
            {   
                <ConfigView Game="@Model" />
            }
            else
            {
                <BoardView Game="@Model" />
            }
        </div>

        <div style="grid-area: deck">
            @if (Model.IsStarted && Model.Decks[PlayerOrSpectatee].Count == 0)
            {
                <SpecialCard Name="blank" Stack="1" />
            }
            else
            {                
                <SpecialCard Name="card-back" Stack="@(!Model.IsStarted ? 10 : Model.Decks[PlayerOrSpectatee].Count)" />
            }            
        </div>

        <div style="grid-area: hand; overflow-x: auto;">
            <GappedRow>
                @if (Model.IsStarted)
                {
                    foreach (var id in Model.Hands[PlayerOrSpectatee])
                    {
                        var card = All.Cards.ByName(@id);
                        var isEnabled = IsActivePlayer &&
                            !Model.IsFinished &&
                            Model.ExecutingActions == 0 &&
                            card.Type != CardType.Victory &&
                            card.Type != CardType.Curse &&
                            (!Model.BuyPhase || card.Type != CardType.Action);
                        <ActiveCard Model="@card" 
                                    Enabled="@isEnabled" 
                                    Action="@(() => Dispatch(new PlayCardCommand { Id = @id }))"/>
                    }
                }
                else if (Model.Players.Contains(Session.Username)) // the hand you might someday have
                {
                    <SpecialCard Name="card-back" />
                    <SpecialCard Name="card-back" />
                    <SpecialCard Name="card-back" />
                    <SpecialCard Name="card-back" />
                    <SpecialCard Name="card-back" />
                }
            </GappedRow>
        </div>
            
        <div style="grid-area: discard">
            @if (Model.IsStarted)
            {
                var discard = Model.Discards[PlayerOrSpectatee];
                if (discard.Any())
                {
                    <ActiveCard Id="@discard.Last()" Stack="@discard.Count" Color="special" />
                }
                else
                {
                    <SpecialCard Name="blank" />
                }
            }
            else
            {
                <SpecialCard Name="blank" />
            }
        </div>
    </div>

    <GridSeparator Area="right-bar"/>

    <div style="grid-area: status" class="game-view__status">
        @if (Model.Players.Any())
        {
            <span>
                @(Model.IsStarted ? "Game in progress." : "Waiting to start.") Current players:
                @for (var i = 0; i < Model.Players.Length; i++)
                {                    
                    if (i < Model.Players.Length - 1)
                    {
                        <PlayerLink @key="@Model.Players[i]" Name="@Model.Players[i]" Suffix=", " />
                    }
                    else
                    {
                        <PlayerLink @key="@Model.Players[i]" Name="@Model.Players[i]" Suffix="." />
                    }
                }
            </span>
        }
        else
        {
            <span>@(Model.IsStarted ? "Game in progress." : "Waiting to start.") No players.</span>
        }
    </div>

    <ChatView Model="@Model.ChatLog" />
</div>