@using System.Collections.Concurrent
@typeparam T
@implements IDisposable
@code {
    [Parameter] public IEndpoint<T> Endpoint { get; set; }
    [Parameter] public RenderFragment<(T Previous, T Current)> ChildContent { get; set; }
    [Parameter] public Func<T, T, bool> IsNewer { get; set; }
    private ConcurrentQueue<T> updates;
    private T lastModel;
    private T currentModel;
    private (T, T) updatePair;

    protected override void OnInitialized()
    {        
        updates = new ConcurrentQueue<T>();
        lastModel = Endpoint.Subscribe(OnUpdate);
        currentModel = lastModel;
        updatePair = (lastModel, currentModel);
    }

    private void OnUpdate(T newModel)
    {
        updates.Enqueue(newModel);
        InvokeAsync(() =>
        {
            var any = false;
            while (updates.TryDequeue(out var updatedModel))
            {
                if (IsNewer == null || IsNewer(updatedModel, currentModel))
                {
                    any = true;
                    currentModel = updatedModel;
                }
            }
            if (any) 
            {
                updatePair = (lastModel, currentModel);
                StateHasChanged();
                lastModel = currentModel;
            }
        });
    }

    public void Dispose()
    {
        Endpoint.Unsubscribe(OnUpdate);
    }
}

@ChildContent(updatePair)